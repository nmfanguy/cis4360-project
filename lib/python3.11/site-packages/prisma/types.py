# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
            },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
            },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
            },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
            },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _int
    logins: 'LoginCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    username: _str
    password: 'fields.Base64'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _int


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    username: _str
    password: 'fields.Base64'


class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]


_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

UserWhereUniqueInput = _UserWhereUnique_id_Input


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    username: _str
    password: 'fields.Base64'
    logins: 'LoginUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    username: _str
    password: 'fields.Base64'


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserCreateOrConnectWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserCreateOrConnectWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_username_OrderByInput = TypedDict(
    '_User_username_OrderByInput',
    {
        'username': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_username_OrderByInput',
    '_User_password_OrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    logins: Union[bool, 'FindManyLoginArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    logins: Union[bool, 'FindManyLoginArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    logins: Union[bool, 'FindManyLoginArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    logins: Union[bool, 'FindManyLoginArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    logins: Union[bool, 'FindManyLoginArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class LoginIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    owner: Union[bool, 'UserArgsFromUserRecursive1']


class LoginIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    owner: Union[bool, 'UserArgsFromUserRecursive2']


class LoginIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    owner: Union[bool, 'UserArgsFromUserRecursive3']


class LoginIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    owner: Union[bool, 'UserArgsFromUserRecursive4']


class LoginIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class LoginArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'LoginIncludeFromLoginRecursive1'


class LoginArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'LoginIncludeFromLoginRecursive2'


class LoginArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'LoginIncludeFromLoginRecursive3'


class LoginArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'LoginIncludeFromLoginRecursive4'


class LoginArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyLoginArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LoginOrderByInput', List['LoginOrderByInput']]
    where: 'LoginWhereInput'
    cursor: 'LoginWhereUniqueInput'
    distinct: List['LoginScalarFieldKeys']
    include: 'LoginIncludeFromLoginRecursive1'


class FindManyLoginArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LoginOrderByInput', List['LoginOrderByInput']]
    where: 'LoginWhereInput'
    cursor: 'LoginWhereUniqueInput'
    distinct: List['LoginScalarFieldKeys']
    include: 'LoginIncludeFromLoginRecursive2'


class FindManyLoginArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LoginOrderByInput', List['LoginOrderByInput']]
    where: 'LoginWhereInput'
    cursor: 'LoginWhereUniqueInput'
    distinct: List['LoginScalarFieldKeys']
    include: 'LoginIncludeFromLoginRecursive3'


class FindManyLoginArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LoginOrderByInput', List['LoginOrderByInput']]
    where: 'LoginWhereInput'
    cursor: 'LoginWhereUniqueInput'
    distinct: List['LoginScalarFieldKeys']
    include: 'LoginIncludeFromLoginRecursive4'


class FindManyLoginArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LoginOrderByInput', List['LoginOrderByInput']]
    where: 'LoginWhereInput'
    cursor: 'LoginWhereUniqueInput'
    distinct: List['LoginScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union['fields.Base64', 'types.BytesFilter']
    logins: 'LoginListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union['fields.Base64', 'types.BytesFilter']
    logins: 'LoginListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union['fields.Base64', 'types.BytesFilter']
    logins: 'LoginListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union['fields.Base64', 'types.BytesFilter']
    logins: 'LoginListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union['fields.Base64', 'types.BytesFilter']
    logins: 'LoginListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union['fields.Base64', 'types.BytesWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union['fields.Base64', 'types.BytesWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union['fields.Base64', 'types.BytesWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union['fields.Base64', 'types.BytesWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union['fields.Base64', 'types.BytesWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _int
    username: _str
    password: 'fields.Base64'
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""
    id: float


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""
    id: _int


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _int
    username: _str
    password: 'fields.Base64'


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    username: bool
    password: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    username: bool
    password: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""
    id: bool


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'username': bool,
        'password': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'username': int,
        'password': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'username',
    'password',
    'logins',
]
UserScalarFieldKeys = Literal[
    'id',
    'username',
    'password',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'logins',
    ]

# Login types

class LoginOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Login create method"""
    id: _int
    owner: 'UserCreateNestedWithoutRelationsInput'
    userId: _int


class LoginCreateInput(LoginOptionalCreateInput):
    """Required arguments to the Login create method"""
    username: 'fields.Base64'
    password: 'fields.Base64'
    service: _str
    salt: 'fields.Base64'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class LoginOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Login create method, without relations"""
    id: _int
    userId: _int


class LoginCreateWithoutRelationsInput(LoginOptionalCreateWithoutRelationsInput):
    """Required arguments to the Login create method, without relations"""
    username: 'fields.Base64'
    password: 'fields.Base64'
    service: _str
    salt: 'fields.Base64'


class LoginCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'LoginCreateWithoutRelationsInput'
    connect: 'LoginWhereUniqueInput'


class LoginCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['LoginCreateWithoutRelationsInput', List['LoginCreateWithoutRelationsInput']]
    connect: Union['LoginWhereUniqueInput', List['LoginWhereUniqueInput']]


_LoginWhereUnique_id_Input = TypedDict(
    '_LoginWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

LoginWhereUniqueInput = _LoginWhereUnique_id_Input


class LoginUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    owner: 'UserUpdateOneWithoutRelationsInput'
    username: 'fields.Base64'
    password: 'fields.Base64'
    service: _str
    salt: 'fields.Base64'


class LoginUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    username: 'fields.Base64'
    password: 'fields.Base64'
    service: _str
    salt: 'fields.Base64'


class LoginUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['LoginCreateWithoutRelationsInput']
    connect: List['LoginWhereUniqueInput']
    set: List['LoginWhereUniqueInput']
    disconnect: List['LoginWhereUniqueInput']
    delete: List['LoginWhereUniqueInput']

    # TODO
    # update: List['LoginUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['LoginUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['LoginScalarWhereInput']
    # upsert: List['LoginUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['LoginCreateOrConnectWithoutRelationsInput']


class LoginUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'LoginCreateWithoutRelationsInput'
    connect: 'LoginWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'LoginUpdateInput'
    # upsert: 'LoginUpsertWithoutRelationsInput'
    # connectOrCreate: 'LoginCreateOrConnectWithoutRelationsInput'


class LoginUpsertInput(TypedDict):
    create: 'LoginCreateInput'
    update: 'LoginUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Login_id_OrderByInput = TypedDict(
    '_Login_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Login_userId_OrderByInput = TypedDict(
    '_Login_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Login_username_OrderByInput = TypedDict(
    '_Login_username_OrderByInput',
    {
        'username': 'SortOrder',
    },
    total=True
)

_Login_password_OrderByInput = TypedDict(
    '_Login_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_Login_service_OrderByInput = TypedDict(
    '_Login_service_OrderByInput',
    {
        'service': 'SortOrder',
    },
    total=True
)

_Login_salt_OrderByInput = TypedDict(
    '_Login_salt_OrderByInput',
    {
        'salt': 'SortOrder',
    },
    total=True
)

LoginOrderByInput = Union[
    '_Login_id_OrderByInput',
    '_Login_userId_OrderByInput',
    '_Login_username_OrderByInput',
    '_Login_password_OrderByInput',
    '_Login_service_OrderByInput',
    '_Login_salt_OrderByInput',
]



# recursive Login types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

LoginRelationFilter = TypedDict(
    'LoginRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class LoginListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class LoginInclude(TypedDict, total=False):
    """Login relational arguments"""
    owner: Union[bool, 'UserArgsFromLogin']


    

class UserIncludeFromLogin(TypedDict, total=False):
    """Relational arguments for Login"""
    logins: Union[bool, 'FindManyLoginArgsFromLoginRecursive1']


class UserIncludeFromLoginRecursive1(TypedDict, total=False):
    """Relational arguments for Login"""
    logins: Union[bool, 'FindManyLoginArgsFromLoginRecursive2']


class UserIncludeFromLoginRecursive2(TypedDict, total=False):
    """Relational arguments for Login"""
    logins: Union[bool, 'FindManyLoginArgsFromLoginRecursive3']


class UserIncludeFromLoginRecursive3(TypedDict, total=False):
    """Relational arguments for Login"""
    logins: Union[bool, 'FindManyLoginArgsFromLoginRecursive4']


class UserIncludeFromLoginRecursive4(TypedDict, total=False):
    """Relational arguments for Login"""

    

class UserArgsFromLogin(TypedDict, total=False):
    """Arguments for Login"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromLoginRecursive1(TypedDict, total=False):
    """Arguments for Login"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromLoginRecursive2(TypedDict, total=False):
    """Arguments for Login"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromLoginRecursive3(TypedDict, total=False):
    """Arguments for Login"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromLoginRecursive4(TypedDict, total=False):
    """Arguments for Login"""
    
    

class FindManyUserArgsFromLogin(TypedDict, total=False):
    """Arguments for Login"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromLoginRecursive1(TypedDict, total=False):
    """Arguments for Login"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromLoginRecursive2(TypedDict, total=False):
    """Arguments for Login"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromLoginRecursive3(TypedDict, total=False):
    """Arguments for Login"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromLoginRecursive4(TypedDict, total=False):
    """Arguments for Login"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class LoginIncludeFromLogin(TypedDict, total=False):
    """Relational arguments for Login"""
    owner: Union[bool, 'UserArgsFromLoginRecursive1']


class LoginIncludeFromLoginRecursive1(TypedDict, total=False):
    """Relational arguments for Login"""
    owner: Union[bool, 'UserArgsFromLoginRecursive2']


class LoginIncludeFromLoginRecursive2(TypedDict, total=False):
    """Relational arguments for Login"""
    owner: Union[bool, 'UserArgsFromLoginRecursive3']


class LoginIncludeFromLoginRecursive3(TypedDict, total=False):
    """Relational arguments for Login"""
    owner: Union[bool, 'UserArgsFromLoginRecursive4']


class LoginIncludeFromLoginRecursive4(TypedDict, total=False):
    """Relational arguments for Login"""

    

class LoginArgsFromLogin(TypedDict, total=False):
    """Arguments for Login"""
    include: 'LoginIncludeFromLoginRecursive1'


class LoginArgsFromLoginRecursive1(TypedDict, total=False):
    """Arguments for Login"""
    include: 'LoginIncludeFromLoginRecursive2'


class LoginArgsFromLoginRecursive2(TypedDict, total=False):
    """Arguments for Login"""
    include: 'LoginIncludeFromLoginRecursive3'


class LoginArgsFromLoginRecursive3(TypedDict, total=False):
    """Arguments for Login"""
    include: 'LoginIncludeFromLoginRecursive4'


class LoginArgsFromLoginRecursive4(TypedDict, total=False):
    """Arguments for Login"""
    
    

class FindManyLoginArgsFromLogin(TypedDict, total=False):
    """Arguments for Login"""
    take: int
    skip: int
    order_by: Union['LoginOrderByInput', List['LoginOrderByInput']]
    where: 'LoginWhereInput'
    cursor: 'LoginWhereUniqueInput'
    distinct: List['LoginScalarFieldKeys']
    include: 'LoginIncludeFromLoginRecursive1'


class FindManyLoginArgsFromLoginRecursive1(TypedDict, total=False):
    """Arguments for Login"""
    take: int
    skip: int
    order_by: Union['LoginOrderByInput', List['LoginOrderByInput']]
    where: 'LoginWhereInput'
    cursor: 'LoginWhereUniqueInput'
    distinct: List['LoginScalarFieldKeys']
    include: 'LoginIncludeFromLoginRecursive2'


class FindManyLoginArgsFromLoginRecursive2(TypedDict, total=False):
    """Arguments for Login"""
    take: int
    skip: int
    order_by: Union['LoginOrderByInput', List['LoginOrderByInput']]
    where: 'LoginWhereInput'
    cursor: 'LoginWhereUniqueInput'
    distinct: List['LoginScalarFieldKeys']
    include: 'LoginIncludeFromLoginRecursive3'


class FindManyLoginArgsFromLoginRecursive3(TypedDict, total=False):
    """Arguments for Login"""
    take: int
    skip: int
    order_by: Union['LoginOrderByInput', List['LoginOrderByInput']]
    where: 'LoginWhereInput'
    cursor: 'LoginWhereUniqueInput'
    distinct: List['LoginScalarFieldKeys']
    include: 'LoginIncludeFromLoginRecursive4'


class FindManyLoginArgsFromLoginRecursive4(TypedDict, total=False):
    """Arguments for Login"""
    take: int
    skip: int
    order_by: Union['LoginOrderByInput', List['LoginOrderByInput']]
    where: 'LoginWhereInput'
    cursor: 'LoginWhereUniqueInput'
    distinct: List['LoginScalarFieldKeys']
    


FindManyLoginArgs = FindManyLoginArgsFromLogin
FindFirstLoginArgs = FindManyLoginArgsFromLogin


    

class LoginWhereInput(TypedDict, total=False):
    """Login arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    owner: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    username: Union['fields.Base64', 'types.BytesFilter']
    password: Union['fields.Base64', 'types.BytesFilter']
    service: Union[_str, 'types.StringFilter']
    salt: Union['fields.Base64', 'types.BytesFilter']

    # should be noted that AND and NOT should be Union['LoginWhereInputRecursive1', List['LoginWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['LoginWhereInputRecursive1']
    OR: List['LoginWhereInputRecursive1']
    NOT: List['LoginWhereInputRecursive1']


class LoginWhereInputRecursive1(TypedDict, total=False):
    """Login arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    owner: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    username: Union['fields.Base64', 'types.BytesFilter']
    password: Union['fields.Base64', 'types.BytesFilter']
    service: Union[_str, 'types.StringFilter']
    salt: Union['fields.Base64', 'types.BytesFilter']

    # should be noted that AND and NOT should be Union['LoginWhereInputRecursive2', List['LoginWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['LoginWhereInputRecursive2']
    OR: List['LoginWhereInputRecursive2']
    NOT: List['LoginWhereInputRecursive2']


class LoginWhereInputRecursive2(TypedDict, total=False):
    """Login arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    owner: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    username: Union['fields.Base64', 'types.BytesFilter']
    password: Union['fields.Base64', 'types.BytesFilter']
    service: Union[_str, 'types.StringFilter']
    salt: Union['fields.Base64', 'types.BytesFilter']

    # should be noted that AND and NOT should be Union['LoginWhereInputRecursive3', List['LoginWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['LoginWhereInputRecursive3']
    OR: List['LoginWhereInputRecursive3']
    NOT: List['LoginWhereInputRecursive3']


class LoginWhereInputRecursive3(TypedDict, total=False):
    """Login arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    owner: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    username: Union['fields.Base64', 'types.BytesFilter']
    password: Union['fields.Base64', 'types.BytesFilter']
    service: Union[_str, 'types.StringFilter']
    salt: Union['fields.Base64', 'types.BytesFilter']

    # should be noted that AND and NOT should be Union['LoginWhereInputRecursive4', List['LoginWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['LoginWhereInputRecursive4']
    OR: List['LoginWhereInputRecursive4']
    NOT: List['LoginWhereInputRecursive4']


class LoginWhereInputRecursive4(TypedDict, total=False):
    """Login arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    owner: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    username: Union['fields.Base64', 'types.BytesFilter']
    password: Union['fields.Base64', 'types.BytesFilter']
    service: Union[_str, 'types.StringFilter']
    salt: Union['fields.Base64', 'types.BytesFilter']



# aggregate Login types


    

class LoginScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Login arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    password: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    service: Union[_str, 'types.StringWithAggregatesFilter']
    salt: Union['fields.Base64', 'types.BytesWithAggregatesFilter']

    AND: List['LoginScalarWhereWithAggregatesInputRecursive1']
    OR: List['LoginScalarWhereWithAggregatesInputRecursive1']
    NOT: List['LoginScalarWhereWithAggregatesInputRecursive1']


class LoginScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Login arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    password: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    service: Union[_str, 'types.StringWithAggregatesFilter']
    salt: Union['fields.Base64', 'types.BytesWithAggregatesFilter']

    AND: List['LoginScalarWhereWithAggregatesInputRecursive2']
    OR: List['LoginScalarWhereWithAggregatesInputRecursive2']
    NOT: List['LoginScalarWhereWithAggregatesInputRecursive2']


class LoginScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Login arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    password: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    service: Union[_str, 'types.StringWithAggregatesFilter']
    salt: Union['fields.Base64', 'types.BytesWithAggregatesFilter']

    AND: List['LoginScalarWhereWithAggregatesInputRecursive3']
    OR: List['LoginScalarWhereWithAggregatesInputRecursive3']
    NOT: List['LoginScalarWhereWithAggregatesInputRecursive3']


class LoginScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Login arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    password: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    service: Union[_str, 'types.StringWithAggregatesFilter']
    salt: Union['fields.Base64', 'types.BytesWithAggregatesFilter']

    AND: List['LoginScalarWhereWithAggregatesInputRecursive4']
    OR: List['LoginScalarWhereWithAggregatesInputRecursive4']
    NOT: List['LoginScalarWhereWithAggregatesInputRecursive4']


class LoginScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Login arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    password: Union['fields.Base64', 'types.BytesWithAggregatesFilter']
    service: Union[_str, 'types.StringWithAggregatesFilter']
    salt: Union['fields.Base64', 'types.BytesWithAggregatesFilter']



class LoginGroupByOutput(TypedDict, total=False):
    id: _int
    userId: _int
    username: 'fields.Base64'
    password: 'fields.Base64'
    service: _str
    salt: 'fields.Base64'
    _sum: 'LoginSumAggregateOutput'
    _avg: 'LoginAvgAggregateOutput'
    _min: 'LoginMinAggregateOutput'
    _max: 'LoginMaxAggregateOutput'
    _count: 'LoginCountAggregateOutput'


class LoginAvgAggregateOutput(TypedDict, total=False):
    """Login output for aggregating averages"""
    id: float
    userId: float


class LoginSumAggregateOutput(TypedDict, total=False):
    """Login output for aggregating sums"""
    id: _int
    userId: _int


class LoginScalarAggregateOutput(TypedDict, total=False):
    """Login output including scalar fields"""
    id: _int
    userId: _int
    username: 'fields.Base64'
    password: 'fields.Base64'
    service: _str
    salt: 'fields.Base64'


LoginMinAggregateOutput = LoginScalarAggregateOutput
LoginMaxAggregateOutput = LoginScalarAggregateOutput


class LoginMaxAggregateInput(TypedDict, total=False):
    """Login input for aggregating by max"""
    id: bool
    userId: bool
    username: bool
    password: bool
    service: bool
    salt: bool


class LoginMinAggregateInput(TypedDict, total=False):
    """Login input for aggregating by min"""
    id: bool
    userId: bool
    username: bool
    password: bool
    service: bool
    salt: bool


class LoginNumberAggregateInput(TypedDict, total=False):
    """Login input for aggregating numbers"""
    id: bool
    userId: bool


LoginAvgAggregateInput = LoginNumberAggregateInput
LoginSumAggregateInput = LoginNumberAggregateInput


LoginCountAggregateInput = TypedDict(
    'LoginCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'username': bool,
        'password': bool,
        'service': bool,
        'salt': bool,
        '_all': bool,
    },
    total=False,
)

LoginCountAggregateOutput = TypedDict(
    'LoginCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'username': int,
        'password': int,
        'service': int,
        'salt': int,
        '_all': int,
    },
    total=False,
)


LoginKeys = Literal[
    'id',
    'owner',
    'userId',
    'username',
    'password',
    'service',
    'salt',
]
LoginScalarFieldKeys = Literal[
    'id',
    'userId',
    'username',
    'password',
    'service',
    'salt',
]
LoginScalarFieldKeysT = TypeVar('LoginScalarFieldKeysT', bound=LoginScalarFieldKeys)

LoginRelationalFieldKeys = Literal[
        'owner',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields